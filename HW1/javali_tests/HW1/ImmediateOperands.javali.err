Debug information for file: javali_tests/HW1/ImmediateOperands.javali
AST Resulting From Parsing Stage:
ClassDecl (name: Main, superClass: Object)
| MethodDecl (argumentNames: [], argumentTypes: [], name: main, returnType: void)
| | Seq ()
| | | VarDecl (name: i0, type: int)
| | Seq ()
| | | Assign ()
| | | | Var (name: i0)
| | | | IntConst (value: 0)
| | | Assign ()
| | | | Var (name: i0)
| | | | BinaryOp (operator: B_PLUS)
| | | | | IntConst (value: 5)
| | | | | Var (name: i0)
| | | BuiltInWrite ()
| | | | Var (name: i0)
| | | BuiltInWriteln ()
| | | Assign ()
| | | | Var (name: i0)
| | | | BinaryOp (operator: B_PLUS)
| | | | | Var (name: i0)
| | | | | IntConst (value: 5)
| | | BuiltInWrite ()
| | | | Var (name: i0)
| | | BuiltInWriteln ()
| | | Assign ()
| | | | Var (name: i0)
| | | | BinaryOp (operator: B_PLUS)
| | | | | BinaryOp (operator: B_PLUS)
| | | | | | Var (name: i0)
| | | | | | IntConst (value: 5)
| | | | | IntConst (value: 3)
| | | BuiltInWrite ()
| | | | Var (name: i0)
| | | BuiltInWriteln ()
AST rendering
graph ToDot{
node704024720_info [label="Main : Object", color="green", shape=box];
node704024720 -- node704024720_info;
node704024720 [label="ClassDecl", style=filled, fillcolor="green"];
node1452012306_info [label="main", color="blue", shape=box];
node1452012306 -- node1452012306_info;
node1452012306 [label="MethodDecl", style=filled, fillcolor="blue"];
node211968962 [label="Seq", style=filled, fillcolor="white"];
node1486566962 [label="VarDecl", style=filled, fillcolor="white"];
node211968962 -- node1486566962;
node1452012306 -- node211968962;
node1173643169 [label="Seq", style=filled, fillcolor="white"];
node1282287470 [label="Assign", style=filled, fillcolor="white"];
node1397616978 [label="Var", style=filled, fillcolor="white"];
node1282287470 -- node1397616978;
node1390835631 [label="IntConst", style=filled, fillcolor="yellow"];
node1282287470 -- node1390835631;
node1173643169 -- node1282287470;
node889729797 [label="Assign", style=filled, fillcolor="white"];
node148912029 [label="Var", style=filled, fillcolor="white"];
node889729797 -- node148912029;
node874217650 [label="BinaryOp", style=filled, fillcolor="white"];
node1436664465 [label="IntConst", style=filled, fillcolor="yellow"];
node874217650 -- node1436664465;
node558187323 [label="Var", style=filled, fillcolor="white"];
node874217650 -- node558187323;
node889729797 -- node874217650;
node1173643169 -- node889729797;
node680576081 [label="BuiltInWrite", style=filled, fillcolor="white"];
node1088872417 [label="Var", style=filled, fillcolor="white"];
node680576081 -- node1088872417;
node1173643169 -- node680576081;
node453523494 [label="BuiltInWriteln", style=filled, fillcolor="white"];
node1173643169 -- node453523494;
node274722023 [label="Assign", style=filled, fillcolor="white"];
node1052967153 [label="Var", style=filled, fillcolor="white"];
node274722023 -- node1052967153;
node1210898719 [label="BinaryOp", style=filled, fillcolor="white"];
node306123060 [label="Var", style=filled, fillcolor="white"];
node1210898719 -- node306123060;
node2104028992 [label="IntConst", style=filled, fillcolor="yellow"];
node1210898719 -- node2104028992;
node274722023 -- node1210898719;
node1173643169 -- node274722023;
node1527430292 [label="BuiltInWrite", style=filled, fillcolor="white"];
node1975546571 [label="Var", style=filled, fillcolor="white"];
node1527430292 -- node1975546571;
node1173643169 -- node1527430292;
node521960438 [label="BuiltInWriteln", style=filled, fillcolor="white"];
node1173643169 -- node521960438;
node632587706 [label="Assign", style=filled, fillcolor="white"];
node726950788 [label="Var", style=filled, fillcolor="white"];
node632587706 -- node726950788;
node1567885839 [label="BinaryOp", style=filled, fillcolor="white"];
node558569884 [label="BinaryOp", style=filled, fillcolor="white"];
node550752602 [label="Var", style=filled, fillcolor="white"];
node558569884 -- node550752602;
node680779399 [label="IntConst", style=filled, fillcolor="yellow"];
node558569884 -- node680779399;
node1567885839 -- node558569884;
node1439337960 [label="IntConst", style=filled, fillcolor="yellow"];
node1567885839 -- node1439337960;
node632587706 -- node1567885839;
node1173643169 -- node632587706;
node741669172 [label="BuiltInWrite", style=filled, fillcolor="white"];
node315860201 [label="Var", style=filled, fillcolor="white"];
node741669172 -- node315860201;
node1173643169 -- node741669172;
node604125138 [label="BuiltInWriteln", style=filled, fillcolor="white"];
node1173643169 -- node604125138;
node1452012306 -- node1173643169;
node704024720 -- node1452012306;
}

Test failed because an exception was thrown:
    Executing assembler failed.
Output:
Program requires too many registers
Stack trace:
cd.backend.codegen.AssemblyFailedException: Executing assembler failed.
Output:
Program requires too many registers
	at cd.backend.codegen.RegisterManager.getRegister(RegisterManager.java:96)
	at cd.backend.codegen.ExprGenerator.intConst(ExprGenerator.java:92)
	at cd.backend.codegen.ExprGenerator.intConst(ExprGenerator.java:26)
	at cd.ir.Ast$IntConst.accept(Ast.java:226)
	at cd.ir.ExprVisitor.visit(ExprVisitor.java:15)
	at cd.backend.codegen.ExprGenerator.visit(ExprGenerator.java:41)
	at cd.backend.codegen.ExprGenerator.binaryOp(ExprGenerator.java:52)
	at cd.backend.codegen.ExprGenerator.binaryOp(ExprGenerator.java:26)
	at cd.ir.Ast$BinaryOp.accept(Ast.java:176)
	at cd.ir.ExprVisitor.visit(ExprVisitor.java:15)
	at cd.backend.codegen.ExprGenerator.visit(ExprGenerator.java:41)
	at cd.backend.codegen.ExprGenerator.binaryOp(ExprGenerator.java:51)
	at cd.backend.codegen.ExprGenerator.binaryOp(ExprGenerator.java:26)
	at cd.ir.Ast$BinaryOp.accept(Ast.java:176)
	at cd.ir.ExprVisitor.visit(ExprVisitor.java:15)
	at cd.backend.codegen.ExprGenerator.visit(ExprGenerator.java:41)
	at cd.backend.codegen.StmtGenerator.assign(StmtGenerator.java:131)
	at cd.backend.codegen.StmtGenerator.assign(StmtGenerator.java:17)
	at cd.ir.Ast$Assign.accept(Ast.java:460)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:40)
	at cd.backend.codegen.StmtGenerator.methodDecl(StmtGenerator.java:73)
	at cd.backend.codegen.StmtGenerator.methodDecl(StmtGenerator.java:17)
	at cd.ir.Ast$MethodDecl.accept(Ast.java:668)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:40)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:17)
	at cd.ir.AstVisitor.visitChildren(AstVisitor.java:28)
	at cd.ir.AstVisitor.dflt(AstVisitor.java:37)
	at cd.ir.AstVisitor.dfltDecl(AstVisitor.java:56)
	at cd.ir.AstVisitor.classDecl(AstVisitor.java:72)
	at cd.ir.Ast$ClassDecl.accept(Ast.java:701)
	at cd.ir.AstVisitor.visit(AstVisitor.java:16)
	at cd.backend.codegen.StmtGenerator.visit(StmtGenerator.java:40)
	at cd.backend.codegen.StmtGenerator.gen(StmtGenerator.java:33)
	at cd.backend.codegen.AstCodeGenerator.go(AstCodeGenerator.java:42)
	at cd.Main.generateCode(Main.java:121)
	at cd.test.AbstractTestAgainstFrozenReference.testCodeGenerator(AbstractTestAgainstFrozenReference.java:135)
	at cd.test.AbstractTestAgainstFrozenReference.test(AbstractTestAgainstFrozenReference.java:47)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
